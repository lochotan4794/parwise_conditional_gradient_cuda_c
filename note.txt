int main() {

    int nrElements = DSIZE;
    float* d_vector, * h_vector;
    h_vector = new float[DSIZE];
    for (int i = 0; i < DSIZE; i++) h_vector[i] = rand() / (float)RAND_MAX;
    h_vector[10] = -10;  // create definite max element
    cudaMalloc(&d_vector, DSIZE * sizeof(float));
    cudaMemcpy(d_vector, h_vector, DSIZE * sizeof(float), cudaMemcpyHostToDevice);
    int max_index = 0;
    max_index = 0;
    int* d_max_index;
    cudaMalloc(&d_max_index, sizeof(int));
    min_idx_kernel <<<MIN(MAX_KERNEL_BLOCKS, ((DSIZE + nTPB - 1) / nTPB)), nTPB >>> (d_vector, DSIZE, d_max_index);
    cudaMemcpy(&max_index, d_max_index, sizeof(int), cudaMemcpyDeviceToHost);

    printf("min index %d \n", max_index);

    return 0;
}